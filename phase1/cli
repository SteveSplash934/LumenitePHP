#!/usr/bin/php
<?php

require_once(__DIR__ . '/engine.constant.php');



class Color
{
    const RESET = "\033[0m";
    const BOLD = "\033[1m";
    const UNDERLINE = "\033[4m";
    const BLACK = "\033[30m";
    const RED = "\033[31m";
    const GREEN = "\033[32m";
    const YELLOW = "\033[33m";
    const BLUE = "\033[34m";
    const MAGENTA = "\033[35m";
    const CYAN = "\033[36m";
    const WHITE = "\033[37m";
    const LIGHT_BLACK = "\033[90m";
    const LIGHT_RED = "\033[91m";
    const LIGHT_GREEN = "\033[92m";
    const LIGHT_YELLOW = "\033[93m";
    const LIGHT_BLUE = "\033[94m";
    const LIGHT_MAGENTA = "\033[95m";
    const LIGHT_CYAN = "\033[96m";
    const LIGHT_WHITE = "\033[97m";

    // Print generic colored text
    public static function print($text, $color)
    {
        echo $color . $text . self::RESET;
    }
    public static function printText($text)
    {
        self::print($text, self::WHITE);
    }
    // Print error (red)
    public static function printError($text)
    {
        self::print($text, self::RED);
    }

    // Print warning (yellow)
    public static function printWarning($text)
    {
        self::print($text, self::YELLOW);
    }

    // Print info (blue)
    public static function printInfo($text)
    {
        self::print($text, self::BLUE);
    }

    // Print success (green)
    public static function printSuccess($text)
    {
        self::print($text, self::GREEN);
    }

    // Print debug (cyan)
    public static function printDebug($text)
    {
        self::print($text, self::CYAN);
    }

    // Print notice (magenta)
    public static function printNotice($text)
    {
        self::print($text, self::MAGENTA);
    }

    // Function to print bold colored text
    public static function printBold($text, $color)
    {
        echo self::BOLD . $color . $text . self::RESET;
    }
}


class CLI
{
    const LUMENITE_VERSION = '1.0.0';

    private $CLI_COMMANDS = array(
        "create" => "create",   // for project initialization
        "config" => "config",   // for configuration management
        "init" => "init",       // for initial setup
        "serve" => "serve",     // if you need a local development server
        "build" => "build",     // for building assets or the app
        "status" => "status",   // to check the current state or health of the app
        "version" => "version", // to show the app's version
        "help" => "help",       // for showing help
        "logs" => "logs",       // to view logs
        "debug" => "debug",     // for debugging tasks
        "migrate" => "migrate", // for managing database migrations
        "migrate:rollback" => "migrate_rollback", // to rollback migrations
        "migrate:reset" => "migrate_reset", // to reset migrations
        "install" => "install"
    );

    private $argv;
    private $argc = 0;

    public function __construct($argv, $argc)
    {
        $this->banner();

        $this->argv = $argv;
        $this->argc = $argc;
        $cmd = (string) ($this->argv[1] ?? null);

        if ($this->argc != 1) {
            if (!$this->command_exists($cmd)) {
                echo "Command '" . $cmd . "' doesn't exists!\n";
                return;
            }

            $cmd = $this->getCmdFromArgv();
            $params = $this->getParamFromArgv();
            $this->call_command_callback($cmd, [$params]);

            // echo $cmd . " " . $params;


        } else {
            echo ENGINE_NAME . " expected a command! Try running with: " . PROGRAM_NAME . " help\n";
            return;
        }
    }

    public function getCmdFromArgv()
    {
        return (string) ($this->argv[1] ?? null);
    }
    public function getParamFromArgv()
    {
        return array_slice($this->argv, 2);
    }

    public function getArgvParam($p)
    {
        return $this->argv[$p];
    }

    public function command_exists($cmd)
    {
        return (array_key_exists($cmd, $this->CLI_COMMANDS)) ? true : false;
    }
    public function call_command_callback($cmd, $params = [])
    {
        $function_name = $this->get_command_callback($cmd);
        if ($function_name) {
            return (empty($params)) ? $this->$function_name() : $this->$function_name(...$params);
        } else {
            return null;
        }
    }
    public function get_command_callback($cmd)
    {
        if (!$this->command_exists($cmd)) {
            echo "Command '" . $cmd . "' doesn't exists!";
            return null;
        }
        return $this->CLI_COMMANDS[$cmd];
    }
    private function deleteDirectory($dir)
    {
        if (!is_dir($dir)) {
            return false;
        }

        // Open the directory
        $items = scandir($dir);

        foreach ($items as $item) {
            // Skip the special entries "." and ".."
            if ($item === '.' || $item === '..') {
                continue;
            }

            $path = $dir . DIRECTORY_SEPARATOR . $item;

            // If it's a directory, recurse into it; otherwise, delete the file
            if (is_dir($path)) {
                $this->deleteDirectory($path);
            } else {
                unlink($path);
            }
        }

        // Remove the directory itself
        return rmdir($dir);
    }

    private function createProjectStructure($baseDir, $structure)
    {
        foreach ($structure as $name => $content) {
            $path = $baseDir . DIRECTORY_SEPARATOR . $name;
            if (is_array($content)) {
                // Create directory
                if (!is_dir($path)) {
                    mkdir($path, 0777, true);
                }
                // Recursively create sub-structure
                $this->createProjectStructure($path, $content);
            } else {
                // Create file
                if (!file_exists($path)) {
                    file_put_contents($path, $content);
                }
            }
        }
    }


    public function create($params = [], $overwrite = false)
    {
        if (!empty($params)) {
            if (file_exists((string) $params[0]) && !$overwrite) {
                echo "Directory '" . $params[0] . "' already exists, do you want to overwrite? [Y/n]: ";
                (string) $answer = readline();
                if (trim(strtolower($answer)) == "y" || trim(strtolower($answer)) == "yes") {
                    $this->create($params, $overwrite = true);
                } else {
                    echo "Project aborted!\n";
                }
            } else {
                if (file_exists($params[0]) && is_dir($params[0]) && $overwrite == true) {
                    echo "Deleting previous app...";
                    if (!$this->deleteDirectory($params[0])) {
                        echo "\nError occurred while deleting app, please try again.\n";
                        exit();
                    }
                    echo "Done!\n";
                    $this->create($params, $overwrite = true);
                } elseif (file_exists($params[0]) && !is_dir($params[0])) {
                    echo "Project aborted! '" . $params[0] . "' is not a dir but exists as a file!\n";
                    exit();
                } else {
                    echo "Creating app: " . $params[0] . "...";
                    mkdir((string)$params[0]);

                    $dbName = strtolower(str_replace('-', '_', $params[0]) . "_db");
                    $projectStructure = [
                        "" . $params[0] . "" => [
                            "app" => [
                                "controllers" => [
                                    "Controllers.php" => "<?php\n// Boiler plate code for Controllers"
                                ],
                                "models" => [
                                    "Models.php" => "<?php\n// Boiler plate code for Models"
                                ],
                                "views" => [
                                    "Views.php" => "<?php\n// Boiler plate code for Views",
                                    "components" => [],
                                    "widgets" => []
                                ],
                                "middleware" => [
                                    "Middleware.php" => "<?php\n// Boiler plate code for Middleware"
                                ],
                                "database" => [
                                    "Database.php" => "<?php\n// Boiler plate code for Database"
                                ],
                                "components" => ["comp1.php" => "<?php //Example component goes here..."]
                            ],
                            "public" => [
                                "components" => [],
                                "css" => ["style.css" => "body{}"],
                                "js" => ["script.js" => "alert(1);"],
                                "images" => [],
                                "index.php" => "<?php\n// Entry point"
                            ],
                            "config" => [
                                "database.php" => "<?php\n// Database configurations",
                                "app.php" => "<?php\n// General app settings",
                                "routes.php" => "<?php\n// Route definitions",
                                "config.php" =>  <<< CONFIGFILEDATA
                                <?php
                                
                                // Load config.ini file
                                \$configFile = __DIR__ . '/config.ini';
                                if (!file_exists(\$configFile)) {
                                    die('Configuration file not found!');
                                }
                                
                                // Parse the config.ini file into an associative array
                                \$config = parse_ini_file(\$configFile, true);
                                
                                // Convert configuration values into PHP constants or variables for the app
                                define('APP_NAME', \$config['General Settings']['app_name']);
                                define('APP_VERSION', \$config['General Settings']['app_version']);
                                define('APP_ENV', \$config['General Settings']['environment']);
                                define('APP_DEBUG', filter_var(\$config['General Settings']['debug'], FILTER_VALIDATE_BOOLEAN));
                                define('DISPLAY_ERRORS', filter_var(\$config['General Settings']['display_errors'], FILTER_VALIDATE_BOOLEAN));
                                
                                define('HOST', \$config['Server Settings']['host']);
                                define('PORT', \$config['Server Settings']['port']);
                                
                                define('VIEW_ENGINE', \$config['View Engine Configuration']['view_engine']);
                                
                                define('DB_HOST', \$config['Database Configuration']['db_host']);
                                define('DB_PORT', \$config['Database Configuration']['db_port']);
                                define('DB_NAME', \$config['Database Configuration']['db_name']);
                                define('DB_USER', \$config['Database Configuration']['db_user']);
                                define('DB_PASSWORD', \$config['Database Configuration']['db_password']);
                                
                                define('CACHE_ENABLED', filter_var(\$config['Caching and Storage Settings']['cache_enabled'], FILTER_VALIDATE_BOOLEAN));
                                define('CACHE_DRIVER', \$config['Caching and Storage Settings']['cache_driver']);
                                define('STORAGE_PATH', \$config['Caching and Storage Settings']['storage_path']);
                                
                                define('LOG_ENABLED', filter_var(\$config['Logging Settings']['log_enabled'], FILTER_VALIDATE_BOOLEAN));
                                define('LOG_LEVEL', \$config['Logging Settings']['log_level']);
                                
                                define('APP_KEY', \$config['Security Settings']['app_key']);
                                
                                ?>
                                CONFIGFILEDATA

                            ],
                            "storage" => [
                                "cache" => [],
                                "logs" => [],
                                "uploads" => []
                            ],
                            "tests" => [],
                            "vendor" => [],
                            ".env" => "APP_ENV=local\nAPP_DEBUG=true\nAPP_KEY=",
                            "composer.json" => "{\n    \"require\": {}\n}",
                            "lumenite.php" => "<?php\n// CLI entry point",
                            "config.ini" =>  <<<configFileContent
[General Settings]
app_name = "$params[0]"
app_version = "1.0.0"
environment = "local" ; local, production, etc.
debug = true ; Set to true for development, false for production
display_errors = true ; Show errors on screen

[Server Settings]
host = "127.0.0.2"
port = 8008

[View Engine Configuration]
view_engine = "Renderize" ; Options: "Renderize", "Blade", "ReactJS", "Vue", "vanilla"

[Database Configuration]
database_engine = "mysql" ; Options: "mysql", "sqlite", etc.
db_host = "localhost"
db_port = 3306
db_name = "$dbName"
db_user = "root"
db_password = ""

[Caching and Storage Settings]
cache_enabled = true
cache_driver = "file" ; Options: "file", "redis", etc.
storage_path = "storage"

[Logging Settings]
log_enabled = true
log_level = "debug" ; Options: "debug", "info", "error", etc.

[Security Settings]
app_key = "your-secret-key" ; Set a strong key for encryption (e.g., JWT)

configFileContent
                        ]
                    ];

                    $baseDir = __DIR__; // You can change this to the desired root directory
                    $this->createProjectStructure($baseDir, $projectStructure);
                    echo "Done!\n";
                }
            }
        } else {
            echo "No parameters provided for 'create' command.\n";
        }
    }

    public function banner()
    {
        $BANNER = <<<BANNER
·······························································
: _                               _ _       ____  _   _ ____  :
:| |   _   _ _ __ ___   ___ _ __ (_) |_ ___|  _ \| | | |  _ \ :
:| |  | | | | '_ ` _ \ / _ \ '_ \| | __/ _ \ |_) | |_| | |_) |:
:| |__| |_| | | | | | |  __/ | | | | ||  __/  __/|  _  |  __/ :
:|_____\__,_|_| |_| |_|\___|_| |_|_|\__\___|_|   |_| |_|_|    :
·······························································
BANNER;

        Color::printBold($BANNER, Color::GREEN);
    }

    public function help()
    {
        $HELPTEXT = <<<HELPTEXT
    
    > HELP
    --------------------------
    1. Project Setup & Configuration
       - create       : Initialize a new project with a specific template or structure.
       - config       : Set or view configuration settings (e.g., environment variables, DB settings).
       - init         : Initialize the LumenitePHP environment or configurations for the project.
    
    2. Project Development
       - serve        : Start a development server for the project.
       - build        : Build or compile assets for production (e.g., minify JS, CSS).
       - watch        : Watch for changes in project files and reload/recompile automatically.
       - migrate      : Run database migrations (if database is involved).
       - seed         : Seed the database with sample data.
       - test         : Run unit tests or integration tests for the project.
    
    3. Deployment
       - deploy       : Deploy the project to the server (can include staging or production).
       - rollback     : Roll back the last deployment to a previous state.
       - status       : Check the status of the deployment (whether the application is running or encountering issues).
    
    4. Utility & Information
       - version      : Display the current version of LumenitePHP.
       - help         : Display help information for available commands.
       - info         : Show system information (like PHP version, extensions, etc.).
    
    5. Maintenance & Cleanup
       - clear-cache  : Clear application cache, logs, or compiled files.
       - optimize     : Optimize the application (e.g., clear logs, optimize autoloaders).
       - update       : Update the framework or dependencies to their latest versions.
    
    6. Debugging & Logs
       - logs         : View logs (application logs, errors, or access logs).
       - debug        : Enable or display debug mode for development.
    
    7. Testing & Validation
       - validate     : Run validation on configuration files, routes, or models.
       - lint         : Lint the codebase for syntax or style errors.
    
    8. Security
       - key:generate : Generate application keys or cryptographic keys for security.
       - cert:generate : Generate SSL certificates for the application.
    
    9. Database & Migrations
       - migrate:rollback : Rollback the last batch of migrations.
       - migrate:reset    : Reset all migrations to a fresh state.
       - migrate:status   : Show the status of migrations (whether they've been run or not).

    HELPTEXT;

        Color::printBold($HELPTEXT, Color::WHITE);
    }
    private function config() {}
    private function init() {}

    private function serve($args)
    {
        // Check if the project name is provided
        if (count($args) < 1) {
            echo "Error: Project name is required.\n";
            exit(1);
        }

        $projectName = $args[0];
        $projectDir = __DIR__ . "/$projectName/public";

        // Check if the directory exists
        if (!is_dir($projectDir)) {
            echo "Error: Directory '$projectDir' does not exist.\n";
            exit(1);
        }

        // Load the configuration file for host and port
        $configFile = __DIR__ . "/$projectName/config.ini";
        if (!file_exists($configFile)) {
            echo "Error: Configuration file not found at '$configFile'.\n";
            exit(1);
        }

        $config = parse_ini_file($configFile, true);

        $host = $config['Server Settings']['host'] ?? '127.0.0.1';
        $port = $config['Server Settings']['port'] ?? 8000;

        // Escape the project directory path to handle spaces
        $escapedProjectDir = escapeshellarg($projectDir);

        // Construct and run the PHP server command
        $command = sprintf("php -S %s:%d -t %s > NUL 2>&1", $host, $port, $escapedProjectDir);
        $date = date("Y-m-d H:i:s");
        Color::printInfo("\n(INFO) [$date] ");
        Color::printText("Starting development server for '$projectName' at http://$host:$port");
        Color::printInfo("\n(INFO) [$date] ");
        Color::printText("Now serving public directory of '$projectName'\n");
        Color::printWarning("Press Ctrl+C to stop the server\n");

        // Execute the command
        passthru($command);
    }


    private function build() {}
    private function status() {}

    private function version()
    {
        Color::printInfo("\n[VERSION] LumeniteApp v" . self::LUMENITE_VERSION . "\n");
    }


    private function logs() {}
    private function debug() {}
    private function migrate() {}
    private function install() {}
}


$LumeniteCLI = new CLI($argv, $argc);
